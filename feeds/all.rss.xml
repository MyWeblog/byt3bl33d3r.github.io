<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>byt3bl33d3r</title><link>https://byt3bl33d3r.github.io/</link><description></description><lastBuildDate>Fri, 02 Jun 2017 01:09:00 -0600</lastBuildDate><item><title>Practical guide to NTLM Relaying in 2017 (A.K.A getting a foothold in under 5 minutes)</title><link>https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html</link><description>&lt;p&gt;This blog post is mainly aimed to be a very 'cut &amp;amp; dry' practical guide to help clear up any confusion regarding NTLM relaying. Talking to pentesters I've noticed that there seems to be a lot of general confusion regarding what you can do with those pesky hashes you get with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Fri, 02 Jun 2017 01:09:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2017-06-02:/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html</guid><category>Active Directory</category></item><item><title>Automating the Empire with the Death Star: getting Domain Admin with a push of a button</title><link>https://byt3bl33d3r.github.io/automating-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html</link><description>&lt;p&gt;Ever since &lt;a href="https://github.com/EmpireProject/Empire"&gt;Empire&lt;/a&gt; and &lt;a href="https://github.com/BloodHoundAD/BloodHound"&gt;BloodHound&lt;/a&gt;, pentesting Active Directory has become pretty straight forward for 95% of the environments I get dropped in. &lt;/p&gt;
&lt;p&gt;I find myself doing the same things over and over again, and when that happens it's time to automate! After all a 'fire and forget' script that automatically …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Mon, 29 May 2017 03:00:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2017-05-29:/automating-the-empire-with-the-death-star-getting-domain-admin-with-a-push-of-a-button.html</guid><category>Active Directory</category></item><item><title>Getting the goods with CrackMapExec: Part 2</title><link>https://byt3bl33d3r.github.io/getting-the-goods-with-crackmapexec-part-2.html</link><description>&lt;p&gt;&lt;strong&gt;Edit 06/02/2017 - CrackMapExec v4 has been released and the CLI commands have changed, see the wiki &lt;a href="https://github.com/byt3bl33d3r/CrackMapExec/wiki"&gt;here&lt;/a&gt; for the most up to date tool docs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="https://byt3bl33d3r.github.io/getting-the-goods-with-crackmapexec-part-1.html"&gt;Part 1&lt;/a&gt; we went over the basics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using credentials&lt;/li&gt;
&lt;li&gt;Dumping credentials&lt;/li&gt;
&lt;li&gt;Executing commands&lt;/li&gt;
&lt;li&gt;Using the payload modules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2 will …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Mon, 25 Apr 2016 23:53:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2016-04-25:/getting-the-goods-with-crackmapexec-part-2.html</guid><category>CrackMapExec</category></item><item><title>Getting the goods with CrackMapExec: Part 1</title><link>https://byt3bl33d3r.github.io/getting-the-goods-with-crackmapexec-part-1.html</link><description>&lt;p&gt;&lt;strong&gt;Edit 06/02/2017 - CrackMapExec v4 has been released and the CLI commands have changed, see the wiki &lt;a href="https://github.com/byt3bl33d3r/CrackMapExec/wiki"&gt;here&lt;/a&gt; for the most up to date tool docs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is going to be a multipost series going over a lot of the functionality of &lt;a href="https://github.com/byt3bl33d3r/CrackMapExec"&gt;CrackMapExec&lt;/a&gt;.
Although there is some documentation already …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Sat, 09 Apr 2016 15:44:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2016-04-09:/getting-the-goods-with-crackmapexec-part-1.html</guid><category>CrackMapExec</category></item><item><title>Installing Empire on Arch Linux</title><link>https://byt3bl33d3r.github.io/installing-empire-on-arch-linux.html</link><description>&lt;p&gt;I'm an Arch linux fan and I've been using Empire on a lot of pentests recently. Problem is Empire requires Swig2 and Arch had only Swig3 in it's repos.&lt;/p&gt;
&lt;p&gt;Today I just noticed that the Arch AUR has a functional Swig2 package, and I finally got Empire running! W00t!&lt;/p&gt;
&lt;p&gt;So …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Wed, 30 Mar 2016 14:44:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2016-03-30:/installing-empire-on-arch-linux.html</guid><category>Arch Linux</category><category>Pentesting</category></item><item><title>Mad-Max Scapy: Improving Scapy's packet sending performance</title><link>https://byt3bl33d3r.github.io/mad-max-scapy-improving-scapys-packet-sending-performance.html</link><description>&lt;p&gt;I've been using Scapy for years and one thing that's always bothered me was it's performace, especially when it comes to sending packets, to give you an idea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scapy.all&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ARP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.1.88&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
             &lt;span class="n"&gt;psrc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.1.11 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Sun, 19 Jul 2015 10:55:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2015-07-19:/mad-max-scapy-improving-scapys-packet-sending-performance.html</guid><category>Python</category><category>Scapy</category></item><item><title>Converting commands to Powershell compatible encoded strings for dummies</title><link>https://byt3bl33d3r.github.io/converting-commands-to-powershell-compatible-encoded-strings-for-dummies.html</link><description>&lt;p&gt;This is basically a reminder for me but could be useful for anyone. I keep forgetting how to convert commands to a Powershell compatible encoded string:&lt;/p&gt;
&lt;p&gt;From the command line: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iex(command)&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; iconv --to-code UTF-16LE &lt;span class="p"&gt;|&lt;/span&gt; base64 -w &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;b64encode&lt;/span&gt;
&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iex(command)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTF-16LE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Tue, 30 Jun 2015 21:18:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2015-06-30:/converting-commands-to-powershell-compatible-encoded-strings-for-dummies.html</guid><category>Pentesting</category></item><item><title>Using Nfqueue with Python the right way</title><link>https://byt3bl33d3r.github.io/using-nfqueue-with-python-the-right-way.html</link><description>&lt;p&gt;While I was re-writing the Spoof plugin for MITMf I came across the "pythonic" way of using Nfqueue with python.&lt;/p&gt;
&lt;p&gt;Previously the plugin was using code from &lt;a href="https://github.com/DanMcInerney/dnsspoof/blob/master/dnsspoof.py"&gt;dnspoof.py&lt;/a&gt; for DNS tampering, which used the nfqueue-bindings python library from &lt;a href="https://github.com/kti/python-netfilterqueue"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Problem was that it was a pain to setup: you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Tue, 10 Mar 2015 08:29:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2015-03-10:/using-nfqueue-with-python-the-right-way.html</guid><category>Networking</category><category>Python</category><category>Nfqueue</category></item><item><title>Toby: finding the needle in the haystack</title><link>https://byt3bl33d3r.github.io/toby-finding-the-needle-in-the-haystack.html</link><description>&lt;p&gt;When I successfully extract a file system from the firmware of an embedded system, the first thing that I do is run &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;strings&lt;/code&gt; looking for low hanging fruit or even potential command injection vulns.&lt;/p&gt;
&lt;p&gt;What I wanted though is something that recursively checked all files of a directory …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Thu, 01 Jan 2015 13:49:00 -0700</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2015-01-01:/toby-finding-the-needle-in-the-haystack.html</guid><category>Reversing</category><category>Python</category><category>Tool</category></item><item><title>Pyexfil - Using Python to make Gmail a C&amp;C server</title><link>https://byt3bl33d3r.github.io/pyexfil-using-python-to-make-gmail-a-cc-server.html</link><description>&lt;p&gt;Now I'm pretty sure there was a talk at BlackHat a couple of years ago about doing this, so this might not be anything new but I'll write about it anyway.&lt;/p&gt;
&lt;p&gt;This is a great way to exfiltrate data from a network: it's stealthy (who looks at traffic going to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">byt3bl33d3r</dc:creator><pubDate>Sat, 19 Jul 2014 20:37:00 -0600</pubDate><guid isPermaLink="false">tag:byt3bl33d3r.github.io,2014-07-19:/pyexfil-using-python-to-make-gmail-a-cc-server.html</guid><category>Backdoor</category><category>Python</category><category>Tool</category></item></channel></rss>